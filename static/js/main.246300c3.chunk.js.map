{"version":3,"sources":["numberToWords/numberToWords.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["numberToWords","number","largeNumberSuffixes","numberInThrees","n","digits","Math","floor","log10","res","i","thisDigits","pow","push","cutNumbersInThree","length","reduce","acc","index","thisThreeDigitsStr","digitThree","concatNumberString","translateTwoDigitsNumber","translateThreeDigitNumber","thisDigitStr","reverse","join","trim","numberToWordMapOneDigit","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","digitTwo","suffix","first","second","App","useState","answer","setAnswer","textRef","useRef","className","ref","type","onClick","current","value","str","parseInt","isNaN","toUpperCase","slice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAEO,SAASA,EAAcC,GAC5B,IAAMC,EAAsB,CAC1B,GACA,WACA,UACA,UACA,WACA,cACA,cAEIC,EAqFD,SAA2BC,GAGhC,IAFA,IAAMC,EAASC,KAAKC,MAAMD,KAAKE,MAAMJ,IAC/BK,EAAgB,GACbC,EAAI,EAAGA,GAAKL,EAAQK,GAAK,EAAG,CACnC,IAAMC,EAAaP,EAAIE,KAAKM,IAAI,GAAIF,EAAI,GACxCD,EAAII,KAAKP,KAAKC,MAAMI,EAAaL,KAAKM,IAAI,GAAIF,KAEhD,OAAOD,EA5FgBK,CAAkBb,GACzC,OAAIE,EAAeY,OAASb,EAAoBa,OACvC,mBAGPZ,EACGa,QAAiB,SAACC,EAAKhB,EAAQiB,GAC9B,IAAMC,EAgBd,SAAmClB,GACjC,IAAMmB,EAAad,KAAKC,MAAON,EAAS,IAAQ,KAIhD,OAAOoB,EAFLD,GAAc,EAAd,UAAqBE,EAAyBF,GAA9C,YAAsE,GAItEE,EAHoBrB,EAAS,MApBEsB,CAA0BtB,GAE/CuB,EAAeL,EACjBE,EAAmBF,EAFRjB,EAAoBgB,IAAU,IAGzC,GAEJ,OADAD,EAAIJ,KAAKW,GACFP,IACN,IAGFQ,UACAC,KAAK,KACLC,OAeP,SAASL,EAAyBrB,GAChC,IAAM2B,EAA6C,CACjDC,EAAG,MACHC,EAAG,MACHC,EAAG,QACHC,EAAG,OACHC,EAAG,OACHC,EAAG,MACHC,EAAG,QACHC,EAAG,QACHC,EAAG,OACHC,GAAI,MACJC,GAAI,SACJC,GAAI,SACJC,GAAI,WACJC,GAAI,WACJC,GAAI,UACJC,GAAI,UACJC,GAAI,YACJC,GAAI,WACJC,GAAI,YAaAC,EAAW1C,KAAKC,MAAMN,EAAS,IACrC,GAAI+C,GAAY,EAAG,CACjB,IAAMC,EAASrB,EAAwB3B,EAAS,IAChD,OAAOoB,EAAmB,GAAD,OAdwB,CACjDS,EAAG,SACHC,EAAG,SACHC,EAAG,SACHC,EAAG,QACHC,EAAG,QACHC,EAAG,UACHC,EAAG,SACHC,EAAG,UAMkDW,GAA5B,KAA0CC,GAErE,OAAOrB,EAAwB3B,GAGjC,SAASoB,EAAmB6B,EAAeC,GACzC,OAAKA,EAGAD,EAGC,GAAN,OAAUA,EAAMvB,OAAhB,YAA0BwB,GAFjBA,EAAOxB,OAHPuB,EAAMvB,O,MCnDFyB,MA1Bf,WAA6B,IAAD,EACEC,mBAAS,IADX,mBACnBC,EADmB,KACXC,EADW,KAEpBC,EAAUC,iBAAyB,MAYzC,OACE,sBAAKC,UAAU,MAAf,UACE,+CACA,8BACE,uBAAOC,IAAKH,EAASI,KAAK,SAC1B,wBAAQC,QAhB0B,WAAO,IAAD,EAC5C,GAAI,UAACL,EAAQM,eAAT,aAAC,EAAiBC,MAAtB,CAGA,IAXgBC,EAWV/D,EAASgE,SAAST,EAAQM,QAAQC,OACxC,GAAIG,MAAMjE,GACR,OAAOsD,EAAU,+BAEnBA,GAfgBS,EAeKhE,EAAcC,IAd1B,GAAGkE,cAAgBH,EAAII,MAAM,MAsBlC,0BAEF,4BAAId,QCnBKe,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.246300c3.chunk.js","sourcesContent":["type NumberToStringMap = { [key: number]: string }\n\nexport function numberToWords(number: number): string {\n  const largeNumberSuffixes = [\n    '',\n    'thousand',\n    'million',\n    'billion',\n    'trillion',\n    'quadrillion',\n    'sextillion',\n  ]\n  const numberInThrees = cutNumbersInThree(number)\n  if (numberInThrees.length > largeNumberSuffixes.length) {\n    return 'Number too large'\n  }\n  return (\n    numberInThrees\n      .reduce<string[]>((acc, number, index) => {\n        const thisThreeDigitsStr = translateThreeDigitNumber(number)\n        const suffix = largeNumberSuffixes[index] || ''\n        const thisDigitStr = thisThreeDigitsStr\n          ? concatNumberString(thisThreeDigitsStr, suffix)\n          : ''\n        acc.push(thisDigitStr)\n        return acc\n      }, [])\n      // This transformation step:\n      // [101, 111, 20] -> ['one hundred one', 'one hundred eleven thousand', 'twenty million']\n      .reverse()\n      .join(' ')\n      .trim()\n  )\n}\n\nfunction translateThreeDigitNumber(number: number) {\n  const digitThree = Math.floor((number % 1000) / 100)\n  const digitThreeStr =\n    digitThree >= 1 ? `${translateTwoDigitsNumber(digitThree)} hundred` : ''\n  const lastTwoDigits = number % 100\n  return concatNumberString(\n    digitThreeStr,\n    translateTwoDigitsNumber(lastTwoDigits)\n  )\n}\n\nfunction translateTwoDigitsNumber(number: number) {\n  const numberToWordMapOneDigit: NumberToStringMap = {\n    1: 'one',\n    2: 'two',\n    3: 'three',\n    4: 'four',\n    5: 'five',\n    6: 'six',\n    7: 'seven',\n    8: 'eight',\n    9: 'nine',\n    10: 'ten',\n    11: 'eleven',\n    12: 'twelve',\n    13: 'thirteen',\n    14: 'fourteen',\n    15: 'fifteen',\n    16: 'sixteen',\n    17: 'seventeen',\n    18: 'eighteen',\n    19: 'nineteen',\n  }\n  const numberToWordMapTwoDigit: NumberToStringMap = {\n    2: 'twenty',\n    3: 'thirty',\n    4: 'fourty',\n    5: 'fifty',\n    6: 'sixty',\n    7: 'seventy',\n    8: 'eighty',\n    9: 'ninety',\n  }\n\n  const digitTwo = Math.floor(number / 10)\n  if (digitTwo >= 2) {\n    const suffix = numberToWordMapOneDigit[number % 10]\n    return concatNumberString(`${numberToWordMapTwoDigit[digitTwo]} `, suffix)\n  }\n  return numberToWordMapOneDigit[number]\n}\n\nfunction concatNumberString(first: string, second: string): string {\n  if (!second) {\n    return first.trim()\n  }\n  if (!first) {\n    return second.trim()\n  }\n  return `${first.trim()} ${second}`\n}\n\nexport function cutNumbersInThree(n: number): number[] {\n  const digits = Math.floor(Math.log10(n))\n  const res: number[] = []\n  for (let i = 0; i <= digits; i += 3) {\n    const thisDigits = n % Math.pow(10, i + 3)\n    res.push(Math.floor(thisDigits / Math.pow(10, i)))\n  }\n  return res\n}\n","import React, { useState, useRef } from 'react'\nimport { numberToWords } from './numberToWords/numberToWords'\nimport './App.css'\n\ntype OnButtonClick = (\n  event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n) => void\n\nfunction capitalize(str: string): string {\n  return str[0].toUpperCase() + str.slice(1)\n}\n\nfunction App(): JSX.Element {\n  const [answer, setAnswer] = useState('')\n  const textRef = useRef<HTMLInputElement>(null)\n  const onTranslateClick: OnButtonClick = () => {\n    if (!textRef.current?.value) {\n      return\n    }\n    const number = parseInt(textRef.current.value)\n    if (isNaN(number)) {\n      return setAnswer('Please enter a valid number')\n    }\n    setAnswer(capitalize(numberToWords(number)))\n  }\n\n  return (\n    <div className=\"App\">\n      <p>Enter a number</p>\n      <p>\n        <input ref={textRef} type=\"text\" />\n        <button onClick={onTranslateClick}>Translate</button>\n      </p>\n      <p>{answer}</p>\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}